SELECTION SORT:-
Approach- Find the minimum element and swap it with position in the beginning.
Time complexity-O(n^2)

#include <iostream>
using namespace std;
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    for(int i=0; i<n-1; i++){
        for(int j=i+1; j<n; j++){
            if(arr[j]<arr[i]){
                int temp=arr[j];
                arr[j]=arr[i];
                arr[i]=temp;
            }
        }
    }
    
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------

Bubble Sorting:-
Approach-Swap the adjacent element if they are in wrong order.
Note-By adding the flag we can improve its efficiency and it can be reduced to O(n) as it will reduce the redundant passes.
Time complexity-O(n^2)-Worst Case
			O(n^2)-Average Case
			O(n)-Best Case.
			
#include<iostream>
using namespace std;
int main()
{
	int n;
	cin>>n;
	
	int arr[n];
	for(int i=0; i<n; i++){
		cin>>arr[i];
	}
	int flag=0;
	for(int i=0; i<n-1; i++){
		for(int j=0; j<n-i-1; j++){
			if(arr[j+1]<arr[j]){
				int temp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=temp;
				flag=1;
			}
		}
		if(flag==0) break;
	}
	for(int i=0; i<n; i++){
		cout<<arr[i]<<" ";
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Quick Sort:-
Idea-It is based on divide and conquer approach where we pick pivot element and places the element lower than pivot in left and elements at right greater than pivot.
Functions :- Partition,QuickSort,Swap.
Time Complexity:- O(nlog n) <Best Case> / O(n^2) <Worst Case>
Space Complexity:-O(log n).

#include<iostream>
using namespace std;
void swap(int* a,int* b){
	int temp=*a;
	*a=*b;
	*b=temp;
}
int partition(int arr[],int start,int end){
        int pivot=arr[end];
        int pi=start;
        for(int i=start; i<end; i++){
                if(arr[i]<=pivot){
                        swap(arr[i],arr[pi]);
                        pi++;
                }
        }
        swap(arr[pi],arr[end]);
        return pi;
}
void quickSort(int arr[],int start,int end){
        if(start<end){
                int pi=partition(arr,start,end);
                quickSort(arr,start,pi-1);
                quickSort(arr,pi+1,end);
        }
}

int main(){
        int arr[]={6,32,4,8,1,9,2};
        int len=sizeof(arr)/sizeof(arr[0]);
        quickSort(arr,0,len-1);
        for(int i=0; i<len; i++){
                cout<<arr[i]<<" ";
        }cout<<endl;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
