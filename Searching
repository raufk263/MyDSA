Linear Search:-
Idea:-Traverse the full array if the element is found then return index otherwise return -1.
Time Complexity-O(n)
Space Complexity-O(1).

#include<iostream>
using namespace std;
int linear(int arr[],int size,int find){
	int index=0;
	for(int i=0; i<size; i++){
		if(arr[i]==find){
			return i;
		}
	}
	return -1;
}

int main()
{
	int arr[]={1,2,4,3,8};
	int size=sizeof(arr)/sizeof(arr[0]);
	int ans=linear(arr,size,8);
	cout<<ans+1<<endl;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
Binary Search:-
Complexity - Time:-O(log n)
             Space:-O(1)
NOTE:-Array has to be sorted.
Idea-Take the mid element and check if element is lesser than mid then make its position mid-1 and if greater make its position as mid+1.
mid=(start+end)/2;  //We can use instead <start+((end-start)/2)> (This prevents integer overflow and this works for bigger numbers as compared to previous one).

#include<iostream>
using namespace std;
int binary(int arr[],int size,int find){
	int start=0;
	int end=4;
	int mid;
	while(start<=end){
		mid=(start+end)/2;
		if(find==arr[mid]) return mid;
		else if(find<arr[mid]) end=mid-1;
		else if(find>arr[mid]) start=mid+1;
	}
	return -1;
}
int main(){
	int arr[]={1,2,3,4,5};
	int size=sizeof(arr)/sizeof(arr[0]);
	int answer=binary(arr,size-1,4);
	cout<<"Element found at index "<<answer+1<<endl;
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
